package ptee;

import java.io.IOException;
import java.util.Iterator;
import java.util.List;

import javax.swing.JProgressBar;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

public class FindExploitsTh extends Thread {

	private List<Cve> cveList;
	private Printf p;
	private JProgressBar progressBar;
	private LocalDataBase db;

	float cCount = 0;
	float percent;
	int count = 0;

	public FindExploitsTh(List<Cve> cveList, Printf p,
			JProgressBar progressBar, LocalDataBase db) {
		this.cveList = cveList;
		this.p = p;
		this.progressBar = progressBar;
		this.db = db;
	}

	public void run() {
		p.println("Подключение локальной базы данных " + db.getStatus());
		if (!MainWindow.offLineMode) {
			p.println("Подключение к интернету ...");

			// TODO добавить проверку доступности разных узлов.
			if (!testConection()) {
				p.println("Не возможно подключиться к базе данных.");
				p.println("Проверьте настройки подключения к интернету.");
				return;
			}
		}
		if (cveList.size() > 100) {
			multiTh(true);
		} else {
			multiTh(false);
		}

		p.println("Второй проход");

		for (Cve cve : cveList) {
			if (cve.status == null)
				parse(cve);
		}

		for (Cve cve : cveList) {
			if (cve.status != "No result")
				if (cve.status != null) {
					count++;
				}
		}
		p.println("\n\nВсего найдено " + count + " эксплоитов");

		MainWindow.readyToSave = true;
		MainWindow.lockLoadData = false;
		progressBar.setValue(100);
		p.println("Готово.");
	}

	private boolean testConection() {
		String urlOne = "http://www.rapid7.com/db/search";
		//String urlTwo = "http://www.exploit-db.com/search";
		boolean result = false;

		try {
			for (int i = 0; i < 5; i++, Thread.sleep(2000)) {
				try {
					@SuppressWarnings("unused")
					Document doc = Jsoup.connect(urlOne).get();
					result = true;
					p.println("Соединение с базой данных Rapid7 установлено.");
					break;
				} catch (IOException e1) {
					result = false;
					p.println("Попытка соединения с базой данных Rapid7 не удалась ...");
					// Thread.sleep(100);
					e1.printStackTrace();
				}
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		return result;

	}

	private void multiTh(boolean multiTh) {

		Cve cve;
		int maxTh = 5;
		FindExploits th[] = new FindExploits[20];
		long startTime;
		long endTime;

		Iterator<Cve> iterator = cveList.iterator();
		if (multiTh) {
			p.println("Вычисление количества потоков...");
			// Вычисление среднего времени выполнения запроса
			startTime = System.currentTimeMillis();

			for (int i = 0; i < 5; i++) {
				cve = iterator.next();
				parse(cve);
			}

			endTime = System.currentTimeMillis();
			maxTh = (int) (((float) (endTime - startTime) / 5000)
					* cveList.size() / 120);
			if (maxTh > 20) {
				maxTh = 20;
			}
			if (maxTh < 4) {
				maxTh = 4;
			}
			p.println("Многопоточная обработка...");
		} else {
			maxTh = 1;
		}

		for (int k = 0; k < maxTh; k++) {
			cve = iterator.next();
			th[k] = new FindExploits(cve, db);
			p.println("Поиск " + cve.name);

			percent = cCount * 100 / cveList.size();
			cCount++;
			if (progressBar != null) {
				progressBar.setValue(((int) percent) + 1);
			}
			th[k].start();
		}

		while (iterator.hasNext()) {

			for (int j = 0; j < maxTh; j++) {

				try {
					th[j].join();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}

				if (!iterator.hasNext()) {
					break;
				}
				cve = iterator.next();
				th[j] = new FindExploits(cve, db);

				p.println("Поиск " + cve.name);
				percent = cCount * 100 / cveList.size();
				cCount++;
				if (progressBar != null) {
					progressBar.setValue(((int) percent) + 1);
				}
				th[j].start();
			}
		}
	}

	private void parse(Cve cve) {

		long startTime;
		long endTime;

		startTime = System.currentTimeMillis();
		FindExploits th = new FindExploits(cve, db);
		th.start();
		try {
			th.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		endTime = System.currentTimeMillis();

		p.println(cve.name + " " + cve.status + "        "
				+ (float) (endTime - startTime) / 1000 + " sec");
		percent = cCount * 100 / cveList.size();
		cCount++;
		if (progressBar != null) {
			progressBar.setValue(((int) percent) + 1);
		}
	}

}
