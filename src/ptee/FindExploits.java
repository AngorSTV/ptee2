package ptee;

import java.io.IOException;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

public class FindExploits extends Thread {

	Cve cve;
	LocalDataBase db;

	public FindExploits(Cve cve, LocalDataBase db) {
		this.cve = cve;
		this.db = db;
	}

	public void run() {

		if (!db.get(cve) & !MainWindow.offLineMode) {
			if (!rapid7(cve)) {
				if (cve.status != null) {
					if (!exploits_db(cve) & MainWindow.sfmodule) {
						if (cve.status != null) {
							 securityfocus(this.cve);
						}
					}
				}
			}
			if (cve.status != null & !cve.status.equals("No result")
					& !db.find(cve.name))
				db.add(cve);
		}
	}
	
	private Document getDoc (String strUrl){
		Document doc = null;
		
		
		return doc;
	}

	private boolean rapid7(Cve cve) {

		String prefixUrl = "http://www.rapid7.com/db/search?utf8=%E2%9C%93&q=";
		String sufixUrl = "&t=m";
		String strUrl = prefixUrl + cve.name + sufixUrl;

		Elements sections;
		Document doc = null;
		boolean status = false;

		try {
			for (int i = 0; i < 5; i++, Thread.sleep(2000)) {
				try {
					doc = Jsoup.connect(strUrl).timeout(5000).get();
					break;
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		sections = doc.getElementsByClass("marB60"); // не найдет экспоит
		if (!sections.isEmpty()) {
			cve.status = "No result";
		} else {
			sections = doc.getElementsByClass("marB40");

			Iterator<Element> iterator = sections.iterator();
			while (iterator.hasNext()) {
				Element section = iterator.next();
				String str = section.select("h1").text();
				if (str.equals("Reliability")) {
					cve.status = section.select("li").text();
					status = true;
				}
				if (str.equals("Development")) {
					Elements bulets = section.select("li");
					Iterator<Element> iterator2 = bulets.iterator();
					while (iterator2.hasNext()) {
						Element s = iterator2.next();
						if (s.text().contains("Source Code")) {
							cve.link = s.select("a").first().attr("href");
						}
					}
				}
				if (str.equals("Module Name")) {
					cve.moduleName = section.select("p").text();
				}
				if (str.isEmpty()) {
					cve.moduleDescription = section.select("p").text();
				}
			}
		}
		sections = doc.getElementsByClass("vbresultList");
		if (!sections.isEmpty()) {
			cve.status = "There are more than one exploits at Rapid7 data base.";
			cve.link = strUrl;
			status = true;
		}
		return status;
	}

	private boolean exploits_db(Cve cve) {

		boolean status = false;
		String prefixUrl = "http://www.exploit-db.com/search/?action=search&filter_page=1&filter_description=&filter_exploit_text=&filter_author=&filter_platform=0&filter_type=0&filter_lang_id=0&filter_port=&filter_osvdb=&filter_cve=";
		String strUrl = prefixUrl + cve.name.substring(4);

		Elements sections;
		Document doc = null;

		try {
			for (int i = 0; i < 5; i++, Thread.sleep(2000)) {
				try {
					doc = Jsoup.connect(strUrl).timeout(5000)
							.userAgent("Mozilla").get();
					break;
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		sections = doc.getElementsByClass("list_explot_description");
		if (sections.isEmpty()) {
			cve.status = "No result";
		} else {
			cve.status = "Available at exploit-db.com";
			status = true;
			Iterator<Element> iterator = sections.iterator();
			while (iterator.hasNext()) {
				Element section = iterator.next();
				cve.link = section.select("a").first().attr("href");
			}
		}
		return status;
	}

	private boolean securityfocus(Cve cve) {
		
		boolean status = false;
		String prefixUrl = "http://www.securityfocus.com/bid";
		String strUrl = prefixUrl;
		Document doc = null;
		
		try {
			for (int i = 0; i < 5; i++, Thread.sleep(2000)) {
				try {
					doc = Jsoup.connect(strUrl).data("op", "display_list")
							.data("c", "12").data("vendor", "")
							.data("title", "").data("version", "")
							.data("CVE", cve.name).timeout(5000)
							.userAgent("Mozilla").post();
					break;
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		
		String raw = doc.toString();
		Pattern p = Pattern.compile("/bid/([0-9]{1,})");
		Matcher m = p.matcher(raw);
		if (m.find()) {
			String index = m.group(1);
			strUrl = "http://www.securityfocus.com/bid/" + index + "/exploit";
			
			try {
				for (int i = 0; i < 5; i++, Thread.sleep(2000)) {
					try {
						doc = Jsoup.connect(strUrl).timeout(5000)
								.userAgent("Mozilla").get();
						break;
					} catch (IOException e1) {
						e1.printStackTrace();
					}
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
			raw = doc.toString();
			p = Pattern.compile("are not aware of any working exploits");
			m = p.matcher(raw);
			if (m.find()) {
				cve.status = "No result";
				status = false;
			} else {
				cve.status = "Available at securityfocus.com";
				cve.link = strUrl;
				status = true;
			}
		}
		return status;
	}
}

